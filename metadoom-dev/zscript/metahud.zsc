class MetaDoomStatusBar : BaseStatusBar
{
	HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mAmountFont;
	InventoryBarState diparms;
	HUDFont mSmallFont;
	HUDFont mSmallFont2;
	
	// You need a DynamicValueInterpolator for any value that you want to have interpolated
	DynamicValueInterpolator mHealthInterpolator;
	DynamicValueInterpolator mArmorInterpolator;
	DynamicValueInterpolator mScoreInterpolator;
	DynamicValueInterpolator mAmmoInterpolator;
	
	static const string powerupStuff[] =
	{
		//Name of Powerup Giver - Powerup Name - Bar Foreground - Bar Background
		"MetaHasteSphere","POWRPINS",
		"MetaRadSuit","POWRSUIT",
		"MetaLightAmp","POWRLAMP",
		"MetaBerserkTimer","POWRBZRK",
		"MetaQuadDamage","POWRQUAD",
		"BufferLineDONOTEDIT","POWRFART" //if u are aware of the purpose of this then you can do what u want with this line
	};
	int barArraySize; //amount of 'columns' that the array has
	int barArrayColumns; //size of the array divided by the columns
	

	override void Init()
	{
		Super.Init();
		SetSize(32, 320, 200);

		// Create the font used for the fullscreen HUD
		Font fnt = "HUDFONT_DOOM";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);
		fnt = "INDEXFONT_DOOM";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true);
		mAmountFont = HUDFont.Create("INDEXFONT");
		diparms = InventoryBarState.Create();
		
		mSmallFont = HUDFont.Create("SMALLFONT");
		mSmallFont2 = HUDFont.Create("SMALLFONT2");
		
		// Powerup Bar Shit
		barArrayColumns = 2;
		barArraySize = powerupStuff.Size()/barArrayColumns;
		
		// Initialize the interpolation variables
		mHealthInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 32);
		mArmorInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 32);
		mScoreInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 64);
		mAmmoInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 32);
	}

	// What happens when a new game begins
	override void NewGame ()
	{
		// Run the parent status bar's NewGame() function
		Super.NewGame();

		// Reset any interpolators that you declared
		mHealthInterpolator.Reset(0);
		mArmorInterpolator.Reset(0);
		mScoreInterpolator.Reset(0);
		mAmmoInterpolator.Reset(0);
	}
	
	// What needs to run every tick
	override void Tick()
	{
		// Run the parent status bar's Tick() function
		Super.Tick();

		// Update the value of the interpolators
		mHealthInterpolator.Update(CPlayer.health); // Set the interpolator's value to this player's health
		mArmorInterpolator.Update(GetArmorAmount());
		mScoreInterpolator.Update(players[consoleplayer].mo.score);
		Ammo ammo1, ammo2;
		int ammomax;
		int ammocount1, ammocount2;
		[ammo1, ammo2, ammocount1, ammocount2] = GetCurrentAmmo();
		mAmmoInterpolator.Update(ammocount1);
	}

	override void Draw (int state, double TicFrac)
	{
		Super.Draw (state, TicFrac);
		BeginStatusBar();
		DrawMainBar (TicFrac);
	}

	protected void DrawMainBar (double TicFrac)
	{
		if (screenblocks < 11)
		{
			DrawImage("HUDBACK", (0, 168), DI_ITEM_OFFSETS);
			
			// widescreen scaling stuff - now mostly automated!
			int x1 = 0;
			int x2 = 0;
			for ( int i = 1; i < 6; i++ )
			{
				x1 = x1 - 320;
				x2 = x2 + 320;
				
				DrawImage("HUDBACK", (x1, 168), DI_ITEM_OFFSETS);
				DrawImage("HUDBACK", (x2, 168), DI_ITEM_OFFSETS);
			}
		}
		
		if (screenblocks < 12)
		{
			if (!CheckInventory("DisableHUD", 1))
			{
				DrawScore();
				DrawHealth();
				DrawArmor();
				DrawKeys();
				DrawAmmo();
				DrawReserve();
				DrawStats();
				DrawFaceBox();
				DrawItemBox();
				DrawPowerupBars();
			}
		}
	}
	
	void DrawScore()
	{
		// Draw frags in Deathmatch, score if not.
		if (deathmatch || teamplay)
		{
			DrawImage("FGICON", (27, 171), DI_ITEM_OFFSETS);
			DrawString(mSmallFont2, FormatNumber(CPlayer.FragCount, 3), (89, 172), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, Font.CR_RED);
		} else {
			
			DrawString(mSmallFont2, FormatNumber(mScoreInterpolator.GetValue(), 10), (89, 172),
			DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT|FNF_FILLZEROS, Font.CR_WHITE);
		}
	}
	
	void DrawHealth()
	{
		DrawImage("HPICON", (27, 189), DI_ITEM_OFFSETS);
		DrawString(mSmallFont2, FormatNumber(CPlayer.health, 3), (24, 189), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE);
		DrawImage("HUDBAR", (36, 189), DI_ITEM_OFFSETS);
		DrawBar("LIFEBAR", "MTBAR", mHealthInterpolator.GetValue(), CPlayer.mo.GetMaxHealth(false), (37, 190), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		if (mHealthInterpolator.GetValue() > 100)
		{
			DrawBar("LIFEBAR2", "MTBAR3", mHealthInterpolator.GetValue() - 100, CPlayer.mo.GetMaxHealth(true),
			(37, 190), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		}
		
		// special powerup timer for invuln sphere
		if (CheckInventory("PowerInvulnerable", 1))
		{
			int itemTimeLeft, itemDuration;
			[itemTimeLeft,itemDuration] = CPlayer.mo.GetEffectTicsForItem("MetaInvulnerabilitySphere");
			
			DrawImage("POWRINV", (26, 188), DI_ITEM_OFFSETS);			
			DrawBar("POWRBAR", "MTBAR3", itemTimeLeft, itemDuration, (37, 190), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		}
	}
	
	void DrawArmor()
	{
		if (GetArmorSavePercent() == 50)
		{
			DrawImage("AP2ICON", (27, 180), DI_ITEM_OFFSETS);
		} else {
			DrawImage("APICON", (27, 180), DI_ITEM_OFFSETS);
		}
		DrawString(mSmallFont2, FormatNumber(GetArmorAmount(), 3), (24, 180), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE);
		
		DrawImage("HUDBAR", (36, 180), DI_ITEM_OFFSETS);
		DrawBar("ARMRBAR", "MTBAR", mArmorInterpolator.GetValue(), 100, (37, 181), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		if (mArmorInterpolator.GetValue() > 100)
		{
			DrawBar("ARMRBAR2", "MTBAR3", (mArmorInterpolator.GetValue() - 100), 100, (37, 181), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		}
	}
	
	void DrawKeys()
	{
		if (screenblocks < 11)
		{
			DrawImage("HUDKEYS", (281, 170), DI_ITEM_OFFSETS);
		}
		
		bool locks[6];
		String image;
		for(int i = 0; i < 6; i++) locks[i] = CPlayer.mo.CheckKeys(i + 1, false, true);
		// key 1
		if (locks[1] && locks[4]) image = "STKEYS6";
		else if (locks[1]) image = "STKEYS0";
		else if (locks[4]) image = "STKEYS3";
		DrawImage(image, (283, 171), DI_ITEM_OFFSETS);
		// key 2
		if (locks[2] && locks[5]) image = "STKEYS7";
		else if (locks[2]) image = "STKEYS1";
		else if (locks[5]) image = "STKEYS4";
		else image = "";
		DrawImage(image, (295, 171), DI_ITEM_OFFSETS);
		// key 3
		if (locks[0] && locks[3]) image = "STKEYS8";
		else if (locks[0]) image = "STKEYS2";
		else if (locks[3]) image = "STKEYS5";
		else image = "";
		DrawImage(image, (307, 171), DI_ITEM_OFFSETS);
	}
	
	void DrawAmmo()
	{
		DrawImage("AMICON", (283, 180), DI_ITEM_OFFSETS);
		DrawImage("HUDBAR", (225, 180), DI_ITEM_OFFSETS);
		
		// Draw current ammo amounts
		Ammo ammo1, ammo2;
		int ammomax;
		int ammocount1, ammocount2;
		[ammo1, ammo2, ammocount1, ammocount2] = GetCurrentAmmo();
		
		// Get the maximum ammo of the current weapon, but WITHOUT crashing
		if (ammo1 != NULL)
		{ ammomax = CPlayer.ReadyWeapon.Ammo1.MaxAmount; }
		
		if (ammo1 != null) 
		{
			DrawString(mSmallFont2, FormatNumber(ammocount1, 3), (295, 180), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_LEFT, Font.CR_WHITE);
			DrawBar("AMMOBAR", "MTBAR", mAmmoInterpolator.GetValue(), ammomax, (226, 181), 0, SHADER_REVERSE, DI_ITEM_OFFSETS);
			
		} else {
			if (meta_pistolammo == 1 && CheckWeaponSelected("MetaPistol"))
			{
				DrawString(mSmallFont2, FormatNumber(GetAmount("Clip"), 3), (295, 180), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_LEFT, Font.CR_WHITE);
			} else {
				DrawString(mSmallFont2, "---", (295, 180), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_LEFT, Font.CR_WHITE);
			}
		}
	}
	
	void DrawReserve()
	{
		if (screenblocks < 11)
		{
			DrawImage("HUDAMMO", (225, 170), DI_ITEM_OFFSETS);
		} else {
			DrawImage("HUDAMMO2", (225, 170), DI_ITEM_OFFSETS);
		}
		DrawString(mIndexFont, FormatNumber(GetAmount("Clip"), 3), (246, 191), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(GetAmount("Shell"), 3), (269, 191), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(GetAmount("RocketAmmo"), 3), (292, 191), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(GetAmount("Cell"), 3), (315, 191), DI_TEXT_ALIGN_RIGHT);
		
		DrawString(mIndexFont, FormatNumber(GetAmount("SoulAmmo"), 3), (246, 172), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(GetAmount("BFGAmmo"), 3), (269, 172), DI_TEXT_ALIGN_RIGHT);
	}
	
	void DrawStats()
	{
		if (screenblocks < 11)
		{
			DrawImage("HUDSTAT", (94, 169), DI_ITEM_OFFSETS);
		} else {
			DrawImage("HUDSTAT2", (94, 169), DI_ITEM_OFFSETS);
		}
		
		DrawString(mIndexFont, FormatNumber(level.killed_monsters, 3), (119, 171), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(level.total_monsters, 3), (138, 171), DI_TEXT_ALIGN_RIGHT);
		
		DrawString(mIndexFont, FormatNumber(level.found_items, 3), (119, 181), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(level.total_items, 3), (138, 181), DI_TEXT_ALIGN_RIGHT);
		
		DrawString(mIndexFont, FormatNumber(level.found_secrets, 3), (119, 191), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(level.total_secrets, 3), (138, 191), DI_TEXT_ALIGN_RIGHT);
	}
	
	void DrawFaceBox()
	{
		if (screenblocks < 11)
		{
			DrawImage("HUDBOX", (142, 168), DI_ITEM_OFFSETS);
		}
		
		// Render the Mugshot
		if (cplayer.getgender()==1) // female mugshot
		{
			DrawTexture(GetMugShot(5, MugShot.ANIMATEDGODMODE|Mugshot.XDEATHFACE|MugShot.CUSTOM, "SFF"), (143, 168), DI_ITEM_OFFSETS);
		} else if (cplayer.getgender()==2) // cyborg mugshot
		{
			DrawTexture(GetMugShot(5, MugShot.ANIMATEDGODMODE|Mugshot.XDEATHFACE|MugShot.CUSTOM, "STC"), (143, 168), DI_ITEM_OFFSETS);
		} else { // fallback - default doomguy
			DrawTexture(GetMugShot(5, MugShot.ANIMATEDGODMODE|Mugshot.XDEATHFACE), (143, 168), DI_ITEM_OFFSETS);
		}
	}
	
	void DrawItemBox()
	{
		if (screenblocks < 11)
		{
			DrawImage("HUDBOX", (184, 168), DI_ITEM_OFFSETS);
		}
		if (CPlayer.mo.InvSel != null && !level.NoInventoryBar)
		{
			if (CheckInventory("InventoryCooldownToken", 1))
			{
				DrawInventoryIcon(CPlayer.mo.InvSel, (185, 168), DI_ITEM_OFFSETS, 0.5);
			} else {
				DrawInventoryIcon(CPlayer.mo.InvSel, (185, 168), DI_ITEM_OFFSETS);
			}
		}
		DrawString(mSmallFont2, FormatNumber(GetAmount("GrenadeAmmo"), 3), (219, 192), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE);
		if (isInventoryBarVisible())
		{
			DrawInventoryBar(diparms, (48, 169), 7, DI_ITEM_LEFT_TOP);
		}
	}
	
	void DrawPowerupBars ()
	{
		if(CPlayer.mo==null)
		{
			return; //if player no exist then cancel...
		}
		int iterator;
		int placement;
		
		for (int i  = 0;i<barArraySize;i++) //go through the array of powerups
		{
			int itemTimeLeft, itemDuration;
			int texwidth, texheight;
			[itemTimeLeft,itemDuration] = CPlayer.mo.GetEffectTicsForItem(powerupStuff[0+barArrayColumns*i]);
			[texwidth,texheight] = TexMan.GetSize(TexMan.CheckForTexture("POWRBAR", TexMan.Type_MiscPatch));
			int cellWidth = texwidth+16; //height of bars
			
			// See now, the IDEA was that I'd change this number to push previous bars backwards.
			// Didn't work. Now I'm stuck.
			placement = 160;
			
			if(itemDuration>-1)
			{
				bool oldoffset = fullscreenOffsets;
				fullscreenOffsets = false;
				DrawImage(powerupStuff[1+barArrayColumns*i], ((placement - 33)+cellWidth*iterator, 165), DI_SCREEN_CENTER);
				DrawImage("HUDBAR", ((placement)+cellWidth*iterator, 165), DI_SCREEN_CENTER);
				DrawBar("POWRBAR", "MTBAR", itemTimeLeft, itemDuration, ((placement)+cellWidth*iterator, 164), 0, SHADER_HORZ, DI_SCREEN_CENTER);
				iterator++;				
				fullscreenOffsets = oldoffset;
			}
		}
	}
}	
