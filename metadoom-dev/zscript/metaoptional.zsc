/*
----------------------------
MetaDoom
ZScript Definitions
Replacement Scripts
----------------------------
*/

// Implements Optional Content as a CVar instead of a side-mod

// This was originally based on some really confusingly-formatted code by Matt
// (https://forum.zdoom.org/viewtopic.php?f=122&t=60916&p=1058774) but now it
// uses engine-provided functionality to do the same thing, just less grossly

// Massive, MASSIVE props to Boondorl for revealing the untold secrets of state-
// specfic flags like bDEHACKED!

// Replace Props with louder, breakable props
class MetaOptionalProps : EventHandler
{
    override void CheckReplacement(ReplaceEvent e) // void WorldTick() //WorldLoaded(WorldEvent e)
	{
		static const string oldActor[] =
		{
			// Gore
			"Gibs", "BrainStem", "ColonGibs", "SmallBloodPool", 
			"BloodyTwitch", "NonsolidTwitch", "DeadStick", "LiveStick", 
			"Meat2", "Meat3", "Meat4", "Meat5", 
			"NonsolidMeat2", "NonsolidMeat3", "NonsolidMeat4", "NonsolidMeat5", 
			"HangBNoBrain", "HangNoGuts", "HangTLookingDown", "HangTLookingUp", 
			"HangTNoBrain", "HangTSkull", 
			// Hell
			"FloatingSkull","HeartColumn","RedTorch","BlueTorch",
			"GreenTorch","ShortRedTorch","ShortBlueTorch","ShortGreenTorch",
			"BigTree","TorchTree","Candelabra","Candlestick",
			"HeadCandles","EvilEye","HeadOnAStick","HeadsOnAStick",
			// Tech
			"TechLamp","TechLamp2","Column","BurningBarrel","TechPillar",
			// Corpses
			"DeadCacodemon", "DeadDemon", "DeadDoomImp", "DeadMarine",
			"DeadZombieman", "DeadShotgunGuy", "GibbedMarine"
		};
		
		static const string newActor[] =
		{
			// Gore
			"MetaCrushedProp", "MetaBrainStem", "MetaColonGibs", "MetaSmallBloodPool", 
			"MetaBloodyTwitch", "MetaNonsolidTwitch", "MetaDeadStick", "MetaLiveStick", 
			"MetaMeat2", "MetaMeat3", "MetaMeat4", "MetaMeat5", 
			"MetaNonsolidMeat2", "MetaNonsolidMeat3", "MetaNonsolidMeat4", "MetaNonsolidMeat5", 
			"MetaHangBNoBrain", "MetaHangNoGuts", "MetaHangTLookingDown", "MetaHangTLookingUp", 
			"MetaHangTNoBrain", "MetaHangTSkull", 
			// Hell
			"MetaFloatingSkull","MetaHeartColumn","MetaRedTorch","MetaBlueTorch",
			"MetaGreenTorch","MetaShortRedTorch","MetaShortBlueTorch","MetaShortGreenTorch",
			"MetaBigTree","MetaTorchTree","MetaCandelabra","MetaCandlestick",
			"MetaHeadCandles","MetaEvilEye","MetaHeadOnAStick","MetaHeadsOnAStick",
			// Tech
			"MetaTechLamp","MetaTechLamp2","MetaColumn","MetaBurningBarrel","MetaTechPillar",
			// Corpses
			"MetaDeadCacodemon", "MetaDeadPinky", "MetaDeadDoomImp", "MetaDeadMarine",
			"MetaDeadZombieman", "MetaDeadShotgunGuy", "MetaGibbedMarine"
			
		};
		
		for(int i = 0; i < oldActor.size(); i++)
		{
			if ( e.Replacee == oldActor[i] ) 
			{
				if (GetDefaultByType(e.Replacee).SpawnState.bDeHacked
				|| (GetDefaultByType(e.Replacee).SeeState != null && GetDefaultByType(e.Replacee).SeeState.bDeHacked)
				|| (GetDefaultByType(e.Replacee).MeleeState != null && GetDefaultByType(e.Replacee).MeleeState.bDeHacked)
				|| (GetDefaultByType(e.Replacee).MissileState != null && GetDefaultByType(e.Replacee).MissileState.bDeHacked)
				|| (GetDefaultByType(e.Replacee).FindState("Pain") != null && GetDefaultByType(e.Replacee).FindState("Pain").bDeHacked)
				|| (GetDefaultByType(e.Replacee).FindState("Death") != null && GetDefaultByType(e.Replacee).FindState("Death").bDeHacked)
				|| (GetDefaultByType(e.Replacee).FindState("XDeath") != null && GetDefaultByType(e.Replacee).FindState("XDeath").bDeHacked))
				{
					if (meta_developer)
						Console.printf("Optional: %s is DEHACKED, don't replace!", OldActor[i]);
						break;
				} else {
					e.Replacement = newActor[i];
				}
			}
		}
	}
}

// Replace certain monsters that tend to get replaced by DEHACKED with new,
// fully meta-fied monsters.
class MetaOptionalMonsters : EventHandler
{
    override void CheckReplacement(ReplaceEvent e) //override void WorldTick() //WorldLoaded(WorldEvent e)
	{
		static const string oldActor[] =
		{
			// Standard Doom Actors
			"ZombieMan", "ShotgunGuy", "ChaingunGuy", "DoomImp", "Demon", 
			"MBFHelperDog", "Spectre", "Cacodemon", "HellKnight", "PainElemental", 
			"LostSoul", "ArchVile", "Revenant", "BaronOfHell", "Arachnotron", "Fatso",
			"SpiderMastermind", "Cyberdemon",
			// Traditionally "Optional" Actors
			"WolfensteinSS", "CommanderKeen",
			// Scripted Marines - Order is important!
			"MarineRocket", "MarineBerserk", "MarineFist", "MarineChainsaw",
			"MarinePistol", "MarineShotgun", "MarineSSG", "MarineChaingun",
			"MarinePlasma", "MarineRailgun", "MarineBFG", "ScriptedMarine"
		};
		
		static const string newActor[] =
		{
			// Standard Doom Actors
			"ZombiemanSpawner", "ShotgunGuySpawner", "ChaingunGuySpawner", "ImpSpawner", "PinkySpawner",
			"DogSpawner", "SpectreSpawner", "CacodemonSpawner", "HellKnightSpawner", "PainElementalSpawner",
			"LostSoulSpawner", "ArchVileSpawner","RevenantSpawner",	"BaronOfHellSpawner", "ArachnotronSpawner", "MancubusSpawner",
			"SpiderMastermindSpawner", "CyberdemonSpawner",
			// Traditionally "Optional" Actors
			"WolfSSSpawner", "KeenSpawner",
			// Scripted Marines - Order is important!
			"MetaMarineRocket", "MetaMarineBerserk", "MetaMarineFist", "MetaMarineChainsaw",
			"MetaMarinePistol", "MetaMarineShotgun", "MetaMarineSSG", "MetaMarineChaingun",
			"MetaMarinePlasma", "MetaMarineRailgun", "MetaMarineBFG", "MetaScriptedMarine"			
		};
		
		for(int i = 0; i < oldActor.size(); i++)
		{
			if ( e.Replacee == oldActor[i] ) 
			{
				if (GetDefaultByType(e.Replacee).SpawnState.bDeHacked
				|| (GetDefaultByType(e.Replacee).SeeState != null && GetDefaultByType(e.Replacee).SeeState.bDeHacked)
				|| (GetDefaultByType(e.Replacee).MeleeState != null && GetDefaultByType(e.Replacee).MeleeState.bDeHacked)
				|| (GetDefaultByType(e.Replacee).MissileState != null && GetDefaultByType(e.Replacee).MissileState.bDeHacked)
				|| (GetDefaultByType(e.Replacee).FindState("Pain") != null && GetDefaultByType(e.Replacee).FindState("Pain").bDeHacked)
				|| (GetDefaultByType(e.Replacee).FindState("Death") != null && GetDefaultByType(e.Replacee).FindState("Death").bDeHacked)
				|| (GetDefaultByType(e.Replacee).FindState("XDeath") != null && GetDefaultByType(e.Replacee).FindState("XDeath").bDeHacked))
				{
					if (meta_developer)
						Console.printf("Optional: %s is DEHACKED, don't replace!", OldActor[i]);
						break;
				} else {
					e.Replacement = newActor[i];
				}
			}
		}
    }
}