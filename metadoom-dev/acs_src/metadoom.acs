#library "metadoom"
#include "zcommon.acs"

global int 1:mapsCleared;

world int 6:item_KeyType;

// Health Warning
Script "HealthWarning_Warn" ENTER
{
	if (GetActorProperty (0, APROP_HEALTH) <= 25 && !CheckInventory("PlayerHealthWarning"))
	{
		LocalAmbientSound("player/healthwarning", 127);
		GiveInventory("PlayerHealthWarning", 1);
		SetHudSize(320,200,1);
		SetFont("SmallFont");
		HudMessage(l:"LOWHEALTHWARNING"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 155.0, 1.0, 0.01, 1.0);
		delay(1);
		HudMessage(l:"LOWHEALTHWARNING"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 145.0, 1.0, 0.01, 1.0);
		delay(1);
		HudMessage(l:"LOWHEALTHWARNING"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 153.0, 1.0, 0.01, 1.0);
		delay(1);
		HudMessage(l:"LOWHEALTHWARNING"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 150.0, 1.0, 0.01, 1.0);
	}
	delay(1);
	restart;
}

Script "HealthWarning_Clear" ENTER
{
	if (GetActorProperty (0, APROP_HEALTH) > 25 && CheckInventory("PlayerHealthWarning"))
	{
		TakeInventory("PlayerHealthWarning", 999);
	}
	delay(1);
	restart;
}

// Melee System
Script "MeleePunch" (void) net
{
	GiveInventory("MeleePunch", 1);
	delay(2);
	TakeInventory("MeleePunch", 999);
}

Script "MeleeHandleBerserk" ENTER
{
	If (!CheckInventory("PowerWeaponLevel2") && CheckInventory("MetaBerserkFist") && !GetCvar("meta_retroberserk"))
	{
		TakeInventory("MetaBerserkFist", 999);
	}
	delay(1);
	restart;
}

Script "MeleeStripBerserkOnStart" ENTER
{
	TakeInventory("MetaBerserkFist", 999);
	TakeInventory("PowerWeaponLevel2", 999);
	TakeInventory("PowerStrength", 999);
}

// TZK's Flashlight
Script "PointerPitch" (void)
{
	SetResultValue(GetActorPitch(0) / -182);
}

Script "FlashlightHandling" ENTER
{
	While(1)
	{
		if (CheckInventory("PistolFlashlight"))
			GiveInventory("FlashlightSpawner", 1);
		Delay(1);
	}
}

// Holy Water
Script "TakeWater" ENTER
{
	if (CheckInventory("HolyWaterPistol") && GetActorZ (0) == GetActorFloorZ (0)
	    && GetActorProperty (0, APROP_Health) > 0 && CheckInventory("HolyWater") < 15)
	{
		if (CheckActorFloorTexture(0, "FWATER1")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "FWATER2")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "FWATER3")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "FWATER4")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "SLIME01")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "SLIME02")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "SLIME03")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "SLIME04")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "SLIME05")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "SLIME06")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "SLIME07")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "SLIME08")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "NUKAGE1")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "NUKAGE2")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "NUKAGE3")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "BLOOD1")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "BLOOD2")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "BLOOD3")) ACS_NamedExecute("GimmeWater",0);
		// PSX Doom
		if (CheckActorFloorTexture(0, "WATER01")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "BSLIME01")) ACS_NamedExecute("GimmeWater",0);
		if (CheckActorFloorTexture(0, "CSLIME01")) ACS_NamedExecute("GimmeWater",0);
		// BTSX
		if (CheckActorFloorTexture(0, "FWATER02")) ACS_NamedExecute("GimmeWater",0);
	}
	
	if (CheckInventory("HolyWaterPistol") && GetActorProperty (0, APROP_Waterlevel) >= 2 && CheckInventory("HolyWater") < 15)
	{
		ACS_NamedExecute("GimmeWater",0);
	}
	delay(35);
	restart;
}

Script "GimmeWater" (void)
{
	int msgColors[22] = 
	{
		"\ca", "\cb", "\cc", "\cd", "\ce", "\cf", "\cg", "\ch", "\ci", "\cj", "\ck",
		"\cl", "\cm", "\cn", "\co", "\cp", "\cq", "\cr", "\cs", "\ct", "\cu", "\cv"
	};

	int color = GetCvar("msg0color");
	
	PlaySound (0, "weapons/waterpistol/ammo", CHAN_ITEM|CHAN_MAYBE_LOCAL|CHAN_UI); //AmbientSound("weapons/waterpistol/ammo", 127);
	GiveInventory("HolyWater", 1);
	FadeTo (69, 203, 215, 0.1, 0.0);
	FadeTo (69, 203, 215, 0.0, 0.1);
	Log(s:msgcolors[color], l:"GOTHOLYWATER");
}

// Fire Self-Extinguish
Script "FireSelfSpray_Control" (void)
{
	LocalAmbientSound("player/extinguishself/start", 127);
	FadeTo (255, 255, 255, 0.1, 0.1);
	GiveInventory("FireExtinguished",1);
	delay(125);
	LocalAmbientSound("player/extinguishself/end", 127);
	TakeInventory("FireExtinguished",999);
	FadeTo (255, 255, 255, 0.0, 0.1);
}

Script "FireSelfSpray_FX" ENTER
{
	if(CheckInventory("FireExtinguished"))
	{
		SpawnForced("MetaFireExtinguisherSelfSprayFX", (GetActorX(0) + random(-64,64)), (GetActorY(0) + random(-64,64)), (GetActorZ(0)));
	}
	delay(1);
	restart;
}

// Soulcube Popup
Script "SoulCubeMsg_Warn" ENTER
{
	if (CheckInventory("MetaCheatDetector"))
	{
		GiveInventory("SoulCubeMessagePopped", 1);
	}
	
	if (CheckInventory("SoulAmmo") == 5 && !CheckInventory("SoulCubeMessagePopped") && !CheckInventory("MetaCheatDetector"))
	{
		LocalAmbientSound("weapons/soulcube/ready", 127);
		GiveInventory("SoulCubeMessagePopped", 1);
		SetHudSize(320,200,1);
		SetFont("SmallFont");
		HudMessage(l:"SOULCUBEREADY"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 155.0, 1.0, 0.01, 1.0);
		delay(1);
		HudMessage(l:"SOULCUBEREADY"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 145.0, 1.0, 0.01, 1.0);
		delay(1);
		HudMessage(l:"SOULCUBEREADY"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 153.0, 1.0, 0.01, 1.0);
		delay(1);
		HudMessage(l:"SOULCUBEREADY"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 150.0, 1.0, 0.01, 1.0);
	}
	delay(1);
	restart;
}

Script "SoulCubeMsg_Clear" ENTER
{
	if (CheckInventory("SoulAmmo") != 5 && CheckInventory("SoulCubeMessagePopped"))
	{
		TakeInventory("SoulCubeMessagePopped", 999);
	}
	delay(1);
	restart;
}

// Blood is thicker...
Script "BloodFX_Water" ENTER
{
		if (CheckActorFloorTexture(0, "FWATER1")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "FWATER2")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "FWATER3")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "FWATER4")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "SLIME01")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "SLIME02")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "SLIME03")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "SLIME04")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "SLIME05")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "SLIME06")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "SLIME07")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "SLIME08")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "NUKAGE1")) SetResultValue(3);
		else if (CheckActorFloorTexture(0, "NUKAGE2")) SetResultValue(3);
		else if (CheckActorFloorTexture(0, "NUKAGE3")) SetResultValue(3);
		else if (CheckActorFloorTexture(0, "BLOOD1")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "BLOOD2")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "BLOOD3")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "LAVA1")) SetResultValue(3);
		else if (CheckActorFloorTexture(0, "LAVA2")) SetResultValue(3);
		else if (CheckActorFloorTexture(0, "LAVA3")) SetResultValue(3);
		else if (CheckActorFloorTexture(0, "LAVA4")) SetResultValue(3);
		// PSX Doom
		else if (CheckActorFloorTexture(0, "WATER01")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "BSLIME01")) SetResultValue(2);
		else if (CheckActorFloorTexture(0, "CSLIME01")) SetResultValue(2);
		// BTSX
		else if (CheckActorFloorTexture(0, "FWATER02")) SetResultValue(2);
		else SetResultValue(1);
}

// Item Variety System

script "Item_Init" ENTER
{
	Thing_ChangeTID(0,1337+PlayerNumber());	
}

script "Item_Shotgun" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaShotgun"))
		{
			if(GetCvar("meta_developer"))
			log(s:"Someone has a Shotgun! Alternate weapon drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_SuperShotgun" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaSuperShotgun"))
		{
			if(GetCvar("meta_developer"))
			log(s:"Someone has a SSG! Alternate weapon drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_RocketLauncher" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaRocketLauncher"))
		{
			if(GetCvar("meta_developer"))
			log(s:"Someone has a Rocket Launcher! Alternate weapon drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_Machinegun" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaMachinegun"))
		{
			if(GetCvar("meta_developer"))
			log(s:"Someone has a Machinegun! Alternate weapon drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_PlasmaRifle" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaPlasmaRifle"))
		{
			if(GetCvar("meta_developer"))
			log(s:"Someone has a Plasma Rifle! Alternate weapon drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_BFG9000" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaBFG9000"))
		{
			if(GetCvar("meta_developer"))
			log(s:"Someone has a BFG9000! Alternate weapon drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_Unmaker" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaUnmaker"))
		{
			if(GetCvar("meta_developer"))
			log(s:"Someone has an Unmaker! Demon Key drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_SoulCube" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaSoulCube"))
		{
			if(GetCvar("meta_developer"))
			log(s:"Someone has a SoulCube! SoulAmmo drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_GameDetector" (void)
{
	str maplump = StrParam(n:PRINTNAME_LEVEL);
	
	if (StrCmp(StrLeft(maplump, 2), "E1") == 0 | StrCmp(StrLeft(maplump, 2), "E2") == 0 | StrCmp(StrLeft(maplump, 2), "E3") == 0 | StrCmp(StrLeft(maplump, 2), "E4") == 0)
	{
		if(GetCvar("meta_developer"))
			log(s:"Map Type: Doom 1 Episodic");
		SetResultValue(2);
	}
	else if (StrCmp(StrLeft(maplump, 5), "LEVEL") == 0 | StrCmp(StrLeft(maplump, 3), "NV_") == 0 )
	{
		if(GetCvar("meta_developer"))
			log(s:"Map Type: Doom 2 Episodic");
		SetResultValue(3);
	}
	else
	{
		if(GetCvar("meta_developer"))
			log(s:"Map Type: Doom 2, probably");
		SetResultValue(1);
	}
}


// Actor Variety System


script "Monster_Init" ENTER
{
	mapsCleared++;
	
	if(GetCvar("meta_developer"))
			log(s:"Current mapclear count: ", i:mapsCleared);
}

script "Monster_ReturnMaps" (void)
{
	if(GetCvar("meta_developer"))
			log(n:0, s:" is checking the mapclear count... (", i:mapsCleared, s:")");
			
	SetResultValue(mapsCleared);
}

// Key Variety System
script "Key_Init" OPEN
{
	item_KeyType = random(1,3);
	
	if(GetCvar("meta_developer"))
			log(s:"Current key skin: ", i:item_KeyType);
}

script "Key_ReturnType" (void)
{
	SetResultValue(item_KeyType);
}

// Fix Players Being Given Old Weapons By Scripts

script "PlayerInventoryFixer" ENTER
{
	if (CheckInventory("Chainsaw") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"Old Chainsaw detected! Replacing with new one");
		
		TakeInventory("Chainsaw",1);
		GiveInventory("MetaChainsaw",1);
		SetWeapon("MetaChainsaw");
	}
	if (CheckInventory("Shotgun") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"Old Shotgun detected! Replacing with new one");
		
		TakeInventory("Shotgun",1);
		GiveInventory("MetaShotgun",1);
		SetWeapon("MetaShotgun");
	}
	if (CheckInventory("SuperShotgun") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"Old SSG detected! Replacing with new one");
		
		TakeInventory("SuperShotgun",1);
		GiveInventory("MetaSuperShotgun",1);
		SetWeapon("MetaSuperShotgun");
	}
	if (CheckInventory("Chaingun") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"Old Chaingun detected! Replacing with Machinegun");
		
		TakeInventory("Chaingun",1);
		GiveInventory("MetaMachineGun",1);
		SetWeapon("MetaMachineGun");
	}
	if (CheckInventory("RocketLauncher") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"Old Rocket Launcher detected! Replacing with new one");
		
		TakeInventory("RocketLauncher",1);
		GiveInventory("MetaRocketLauncher",1);
		SetWeapon("MetaRocketLauncher");
	}
	if (CheckInventory("PlasmaRifle") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"Old Plasma Rifle detected! Replacing with new one");
				
		TakeInventory("PlasmaRifle",1);
		GiveInventory("MetaPlasmaRifle",1);
		SetWeapon("MetaRocketLauncher");
	}
	if (CheckInventory("BFG9000") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"Old BFG detected! Replacing with new one");
		
		TakeInventory("BFG9000",1);
		GiveInventory("MetaBFG9000",1);
		SetWeapon("MetaBFG9000");
	}

	delay(1);
	restart;
}

// Get Sector Light for Decorate

script "Spectre_SectorLight" (void)
{
	int i = 0;
	i = GetActorLightLevel(0);
	
	if(i >= 128)
	{
		if(GetCvar("meta_developer"))
			log(s:"Spectre is a bright one! (", i:i, s:")");
		
		SetResultValue(1);
	} else {
		if(GetCvar("meta_developer"))
			log(s:"Spectre is a bit dim. (", i:i, s:")");
		SetResultValue(0);
	}
    terminate;
}

//Cheaty Cheaty

// Give IDKFA Users the Inventory Items
script "InventoryCheat" ENTER
{
	if (CheckInventory("MetaCheatDetector") == 1)
	{
		GiveInventory("HandGrenade", 1);
		GiveInventory("TeslaRocket", 1);
		GiveInventory("Shieldwall", 1);
		GiveInventory("SiphonGrenade", 1);
		GiveInventory("DogCollar", 1);
		GiveInventory("Hologram", 1);
		GiveInventory("DemonKeyCheat", 3);
		
		SetActorProperty(0,APROP_Score,0);
		delay(1);
		TakeInventory("MetaCheatDetector", 1);
	}
	
	delay(1);
	restart;
}

// New Cheat System
Script "Impulse" (int n)
{
	int i;
	AmbientSound("umpulse/default",127); // HENH HEEEEEEEEH
	// TODO: STOP THIS FROM RUNNING WHEN CHEATS ARE DISABLED
	
	if (GetCVar("sv_cheats") | GameSkill() >= 4)
	{
		log(s:"You're too good to be cheating!");
	} else {
		if (n == 35) // Micro-Rocket Placeholder Mode
		{
			if (CheckInventory("MachinegunCheat") == 0)
			{
				AmbientSound("weapons/machinegun/rackout",127);
				log(s:"Micro-Rocket Placeholder Mode On");
				GiveInventory("MachinegunCheat", 1);
			} else {
				AmbientSound("weapons/machinegun/rackin",127);
				log(s:"Micro-Rocket Placeholder Mode Off");
				TakeInventory("MachinegunCheat", 1);
			}
		} else if (n == 2004) // Doom 3 Mode
		{
			log(s:"More like Doom 3 Doom, am I right?");
			AmbientSound("cheats/doom3",127);
			for (i = 0; i < 65535; i++)
			{
				//Log(d:i, s:": ", d:GetSectorLightLevel(i));
				if (GetSectorLightLevel(i) > 0)
				{
					Light_ChangeToValue(i, 0);
					Sector_SetFade(i, 0,0,0);
					Light_Stop(i);
				}
	 
				if (i % 10000 == 10000-1) { Delay(1); }
			}
		} else if (n == 16) // SNES Mode
		{
			log(s:"Powered by the Super FX Chip!");
			AmbientSound("cheats/snes",127);
			for (i = 0; i < 65535; i++)
			{
				Sector_SetFloorScale(i,99999,0,99999,0);
				Sector_SetCeilingScale(i,99999,0,99999,0);
	 
				if (i % 10000 == 10000-1) { Delay(1); }
			}
		} else {
			log(s:"Bzzzt! Thank you for playing.");
			Thing_Damage(0,9999,MOD_EXIT);
		}
	}
}

// don't get too brutal, kid

function int unusedTID(int start, int end)
{
    int ret = start - 1;
    int tidNum;

    if (start > end) { start ^= end; end ^= start; start ^= end; }  // good ol' XOR swap
    
    while (ret++ != end)
    {
        if (ThingCount(0, ret) == 0)
        {
            return ret;
        }
    }
    
    return -1;
}

script "BrutalChecker" ENTER
{
    int s = unusedTID(37000, 47000);

    if (SpawnForced("Brutal_Blood",0,0,0,s,0))
	{
		SetFont("BIGFONT");
		HudMessage(s:"Hello! You seem to have Brutal Doom\n
		loaded at the same time as MetaDoom.\n
		This will cause bugs and glitches.\n
		Please Understand.";
		HUDMSG_TYPEON | HUDMSG_LOG, 0, CR_TAN, 1.5, 0.8, 5.0,
		0.05, 2.0);
    }
}