/*
----------------------------
MetaDoom
Actor Definitions
ZScript Stuff
----------------------------
*/

// Flags for A_CheckSolidFooting
enum ECheckSolidFootingFlags
{
	CSF_SOLIDGROUND = 1,
	CSF_SOLIDACTORS = 2,
	
	CSF_ALL = CSF_SOLIDGROUND|CSF_SOLIDACTORS,
}

class CheckSolidFooting : Actor
{
	default
	{
		+PUFFONACTORS
		+BLOODLESSIMPACT
		+HITTARGET
		+PAINLESS
		+ALLOWTHRUFLAGS
		+THRUSPECIES
		
		Height 0;
		Species "CheckSolidFooting";
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			stop;
	}
}

class MetaDoomActor : Actor
{
	// This is just a container actor for various functions used by the
	// "MonsterCore" DECORATE actor, and as a result, all of MetaDoom's
	// many monsters.
	
	// -----------------------------------------------------------------

	// A_MetaPinata("ActorName", amount)
	// Spews the stated actor out from the caller.
	// Used for the "item pinata" effects
	void A_MetaPinata(class<Actor> spawntype, int spawnamount)
	{
		int pinataCount;
	
		for (pinataCount = spawnamount; pinataCount > 0; pinataCount --)
		{
			A_SpawnItemEx(spawntype,0,0,32,random(0,8),0,random(0,8),random(0,360));
		}
	}
	
	// A_MetaBleed("ActorName")
	// Handles bleeding from Axe wounds
	// The specified actor is spawned as the blood
	void A_MetaBleed(class<Actor> spawntype)
	{
		int user_bloodpart;
		
		if (CountInv("BleedingCounter") > 0)
		{
			user_bloodpart = 10;
			A_DamageSelf ((5), "Bleeding");
			A_SpawnProjectile (spawntype, (height / 2), 0, random (0, 360), 2, random (0, 160));
			
			for (user_bloodpart; user_bloodpart > 0; user_bloodpart --)
			{
				A_SpawnParticle(BloodColor,SPF_RELATIVE,random(16,32),random(3,8),0,0,0,(height / 2),frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			}
			
			A_PlaySound("monsters/bleed", CHAN_5);
			A_TakeInventory("BleedingCounter", 1);
		}
	}
	
	// A_CheckSolidFooting("State", flags)
	// Checks if the actor is on a solid object, jumps if true.
	// Flags (somewhat self explanatary):
	// CSF_SOLIDACTORS, CSF_SOLIDGROUND, CSF_ALL (default)
	// Authored by The Zombie Killer
	action state A_CheckSolidFooting(statelabel label, int flags = CSF_ALL)
	{
		// we need to set the species to "CheckSolidFooting" temporarily
		// so that our collision test puff doesn't hit /us/
		let mySpecies = species;
		species = "CheckSolidFooting";
		
		// todo: lineattack from the actor's four corners for more accuracy
		for (let px = -radius; px <= radius; px += radius)
			for (let py = -radius; py <= radius; py += radius)
		{
			// perform lineattack
			let point = Spawn("CheckSolidFooting", Vec3Offset(px, py, 0), ALLOW_REPLACE);
			let check = point.LineAttack(0, 9, 90, 0, "", "CheckSolidFooting", LAF_NORANDOMPUFFZ);
			
			// we don't need you anymore
			point.SetState(point.ResolveState("Null"));
			
			// was there a collision?
			if (check)
			{
				// restore original species
				species = mySpecies;
				
				if (check.target)
				{
					let hit = check.target;
					
					// ensure we're standing on it
					if (pos.z == hit.pos.z + hit.height && vel.z == hit.vel.z)
					{
						if (flags & CSF_SOLIDACTORS)
							return ResolveState(label);
					}
				}
				
				if (flags & CSF_SOLIDGROUND)
					return ResolveState(label);
			}
		}
		
		// restore original species
		species = mySpecies;
		
		if (flags & CSF_SOLIDGROUND)
			return A_CheckFloor(label);
		
		return null;
	}
}