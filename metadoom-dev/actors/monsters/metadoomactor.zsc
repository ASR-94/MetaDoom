/*
----------------------------
MetaDoom
Actor Definitions
ZScript Stuff
----------------------------
*/

// Flags for A_CheckSolidFooting
enum ECheckSolidFootingFlags
{
	CSF_SOLIDGROUND = 1,
	CSF_SOLIDACTORS = 2,
	
	CSF_ALL = CSF_SOLIDGROUND|CSF_SOLIDACTORS,
}

class CheckSolidFooting : Actor
{
	default
	{
		+PUFFONACTORS
		+BLOODLESSIMPACT
		+HITTARGET
		+PAINLESS
		+ALLOWTHRUFLAGS
		+THRUSPECIES
		
		Height 0;
		Species "CheckSolidFooting";
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			stop;
	}
}

// The base monster actor, from which all monsters are inherited.
	
class MonsterCore : Actor
{
	Default
	{
		painchance "Fist", 255;
		painchance "Axe", 255;
		painchance "Vampire", 255;
		painchance "LightningStun", 255;
		painchance "Bleeding", 0;
		painchance "LightningGun", 0;
		painchance "SoulCube", 255;
		damagefactor "FireExtinguisher", 0;
		damagefactor "DogCollar", 0;
		damagefactor "LightningStun", 0.1;
		painchance "DogCollar", 0;
	}
	
	double oldVel;
	override void Tick()
	{
		oldVel = vel.z;
		Super.Tick();
	}
	
	States
	{
	// Siphon Grenade
	Pain.Vampire:
		"####" # 0 A_GiveToTarget ("Health", 1);
		"####" # 0 A_PlaySound("monsters/vamped");
		"####" # 0 A_Jump(256,"Pain");
		stop;
	// Lightning Gun Stun
	Pain.LightningStun:
		"####" # 0 A_PlaySound("monsters/shocked");
		"####" # 0 A_Jump(256,"Pain");
		stop;
	// Fire Axe
	Pain.Axe:
		"####" # 0
		{
			A_GiveInventory("BleedingCounter", 4);
			A_MetaPinata("MetaHealthPinata", 3);
			ThrustThing(angle*256/360+128, 8, 1, 0);
		}
		"####" # 0 A_Jump(256,"Pain");
		stop;
	Death.Axe:
		"####" # 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			A_MetaPinata("MetaHealthPinata", 5);
		}
		"####" # 0 A_Jump(256,"Death");
		stop;
	XDeath.Axe:
		"####" # 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			A_MetaPinata("MetaHealthPinata", 5);
		}
		"####" # 0 A_Jump(256,"XDeath");
		stop;
	Death.Bleeding:
		"####" # 0
		{
			A_MetaPinata("MetaHealthPinata", 5);
		}
		"####" # 0 A_Jump(256,"Death");
		stop;
	// Fists - Standard
	Pain.Fist:
		"####" # 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			if (self.bNOGRAVITY == false)
			{
				ThrustThingZ(0,32,0,1);
			}
			A_MetaPinata("MetaHealthPinata", 2);
			bFrightened = False;
			A_TakeInventory("ScurredCounter",999);
		}
		"####" # 0 A_Jump(256,"Punched");
		stop;
	Punched: // default for if actor doesn't have punched state
		"####" # 0 A_Jump(256,"Pain");
		stop;
	Death.Fist:
		"####" # 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_MetaPinata("MetaHealthPinata", 5);
		}
		"####" # 0 A_Jump(256,"Death");
		stop;
	XDeath.Fist:
		"####" # 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_MetaPinata("MetaHealthPinata", 10);
		}
		"####" # 0 A_Jump(256,"XDeath");
		stop;
	// Fists - Berserker
	Pain.BerserkFist:
		"####" # 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 64, 1, 0);
			if (self.bNOGRAVITY == false)
			{
				ThrustThingZ(0,32,0,1);
			}
			A_MetaPinata("MetaHealthPinata", 1);
			bFrightened = False;
			A_TakeInventory("ScurredCounter",999);
		}
		"####" # 0 A_Jump(256,"Pain");
		stop;
	Death.BerserkFist:
		"####" # 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 64, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_MetaPinata("MetaHealthPinata", 2);
		}
		"####" # 0 A_Jump(256,"Death");
		stop;
	XDeath.BerserkFist:
		"####" # 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 64, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_MetaPinata("MetaHealthPinata", 3);
		}
		"####" # 0 A_Jump(256,"XDeath");
		stop;
	// Chainsaw Melee
	Pain.ChainsawMelee:
		"####" # 0 
		{
			A_FaceTarget();
			//ThrustThing(angle*256/360+128, 8, 1, 0);
			if (self.bNOGRAVITY == false)
			{
				ThrustThingZ(0,32,0,1);
			}
			A_MetaPinata("MetaHealthPinata", 1);
			bFrightened = False;
			A_TakeInventory("ScurredCounter",999);
		}
		"####" # 0 A_Jump(256,"Punched");
		stop;
	Death.ChainsawMelee:
		"####" # 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_MetaPinata("MetaHealthPinata", 5);
		}
		"####" # 0 A_Jump(256,"Death");
		stop;
	// "kill monsters" cheat, to avoid the framerate exploding
	Death.Massacre:
		"####" # 0 A_Jump(256,"Death");
		stop;
	// SoulCube
	Pain.SoulCube:
		"####" # 0
		{
			A_MetaPinata("MetaHealthPinataPerm", 12);
			A_MetaPinata("MetaArmorPinata", 12);
			A_MetaPinata("MetaPinataClip", 12);
			A_MetaPinata("MetaPinataShell", 12);
			A_MetaPinata("MetaPinataRocket", 12);
			A_MetaPinata("MetaPinataCell", 12);
		}
		"####" # 0 A_Jump (256, "Pain");
		stop;
	Death.SoulCube:
	XDeath.SoulCube:
		"####" # 0
		{
			A_MetaPinata("MetaHealthPinataPerm", 12);
			A_MetaPinata("MetaArmorPinata", 12);
			A_MetaPinata("MetaPinataClip", 12);
			A_MetaPinata("MetaPinataShell", 12);
			A_MetaPinata("MetaPinataRocket", 12);
			A_MetaPinata("MetaPinataCell", 12);			
		}
		"####" # 0 A_Jump (256, "XDeath");
		stop;
	// Spiderdemon
	Pain.SpiderdemonTKAttack:
		"####" # 0
		{
			ThrustThingZ(0,32,0,1);
		}
		"####" # 0 A_Jump (256, "Pain");
		stop;
	// General purpose catchall to prevent errors when an actor that doesn't have an XDeath tries to jump to an XDeath
	XDeath:
		"####" # 0 A_Jump (256, "Death");
		stop;
	}

	
	// -----------------------------------------------------------------

	// A_MetaPinata("ActorName", amount)
	// Spews the stated actor out from the caller.
	// Used for the "item pinata" effects
	void A_MetaPinata(class<Actor> spawntype, int spawnamount)
	{
		int pinataCount;
	
		for (pinataCount = spawnamount; pinataCount > 0; pinataCount --)
		{
			A_SpawnItemEx(spawntype,0,0,32,random(0,8),0,random(0,8),random(0,360));
		}
	}
	
	// A_MetaBleed("ActorName")
	// Handles bleeding from Axe wounds
	// The specified actor is spawned as the blood
	void A_MetaBleed(class<Actor> spawntype)
	{
		int user_bloodpart;
		
		if (CountInv("BleedingCounter") > 0)
		{
			user_bloodpart = 10;
			A_DamageSelf ((5), "Bleeding");
			A_SpawnProjectile (spawntype, (height / 2), 0, random (0, 360), 2, random (0, 160));
			
			for (user_bloodpart; user_bloodpart > 0; user_bloodpart --)
			{
				A_SpawnParticle(BloodColor,SPF_RELATIVE,random(16,32),random(3,8),0,0,0,(height / 2),frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
			}
			
			A_PlaySound("monsters/bleed", CHAN_5);
			A_TakeInventory("BleedingCounter", 1);
		}
	}
	
	// A_CheckSolidFooting("State", flags)
	// Checks if the actor is on a solid object, jumps if true.
	// Flags (somewhat self explanatary):
	// CSF_SOLIDACTORS, CSF_SOLIDGROUND, CSF_ALL (default)
	// Authored by The Zombie Killer
	action state A_CheckSolidFooting(statelabel label, int flags = CSF_ALL)
	{
		if (invoker.oldVel != vel.z)
			return null;

		// are we standing on solid ground?
		if (abs(pos.z - GetZAt()) <= 1 && (flags & CSF_SOLIDGROUND))
			return ResolveState(label);
	   
		// are we standing on an actor?
		bool ok; Actor below;
		[ok, below] = TestMobjZ(true);
		if (below && (flags & CSF_SOLIDACTORS))
			return ResolveState(label);
	   
		if (vel.z == invoker.oldVel && (flags & CSF_SOLIDGROUND))
			return ResolveState(label);

		return null;
	}

	// A_CheckNoSolidFooting("State", flags)
	// An inverse version of A_CheckSolidFooting
	// Flags (somewhat self explanatary):
	// CSF_SOLIDACTORS, CSF_SOLIDGROUND, CSF_ALL (default)
	// Authored by The Zombie Killer
	action state A_CheckNoSolidFooting(statelabel label, int flags = CSF_ALL)
	{
		return A_CheckSolidFooting(label, flags) == null ? ResolveState(label) : null;
	}
}