/*
----------------------------
MetaDoom
Actor Definitions
Trite
----------------------------
*/

// Using the Stalker actor from Strife as a base. Pardon my dust.

class MetaTrite : MonsterCore
{
	Default
	{
		Health 50;
		Painchance 40;
		Speed 16;
		Radius 31;
		Height 25;
		Monster;
		+DROPOFF
		//+NOVERTICALMELEERANGE
		+ROLLSPRITE
		+ROLLCENTER
		MaxDropOffHeight 32;
		MinMissileChance 150;
		AttackSound "monsters/trite/bite";
		PainSound "monsters/trite/squeak";
		DeathSound "monsters/trite/die";
		ActiveSound "monsters/trite/squeak";
		HitObituary "$OB_TRITE";
		xscale 0.5;
		yscale 0.5;
		BloodType "GreenBlood";
		BloodColor "0 78 0";
		Decal "greenbloodsplat";
		damagefactor "Fist", 500;
		damagefactor "BerserkFist", 500;
		damagefactor "KrautBoot", 500;
		damagefactor "Axe", 500;
		Tag "Trite";
		//$Category "Monsters/MetaDoom/Spectre"
		//$Title "Trite"
		//$Color 12
	}

	States
	{
	Spawn:
		TRIT A 0;
		TRIT A 0 A_Jump(128, "SpawnPart2a");
		goto SpawnPart2b;
	SpawnPart2a:
		TRIT A 0 A_JumpIf((ceilingz - floorz) > 100, "SpawnPart2b");
		TRIT AAAAAAAAA 1
		{
			ThrustThingZ(0,32,0,0);
			self.bNoGravity = true;
		}
		//TRIT A 0 A_JumpIf( pos.z + 25 = CeilingZ, "SpawnPart2b");
		goto SpawnPart2b;
	SpawnPart2b:
		TRIT A 1 A_TriteLookInit;
		Loop;
	LookCeiling:
		TRIT A 10 A_Look;
		Loop;
	LookFloor:
		TRIT A 10 A_Look;
		Loop;
	See:
		TRIT A 3 Fast A_TriteChaseDecide;
		TRIT B 3 Fast A_MetaChase("Melee",null);
		TRIT C 3 Fast A_TriteWalk;
		TRIT D 3 Fast A_MetaChase("Melee",null);
		Loop;
	Melee:
		TRIT A 3 Slow A_FaceTarget;
		TRIT B 3 Slow A_TriteAttack;
		goto SeeFloor;
	SeeFloor:
		TRIT A 3 Fast A_TriteWalk;
		TRIT B 3 Fast A_MetaChase("Melee","JumpUp");
		TRIT C 3 Fast A_TriteWalk;
		TRIT D 3 Fast A_MetaChase("Melee","JumpUp");
		Loop;
	JumpUp:
		TRIT A 0 A_JumpIf((ceilingz - floorz) > 100, "SeeFloor");
		TRIT A 0 A_PlaySound("monsters/trite/jump");
		TRIT AAAAAAAAA 1
		{
			ThrustThingZ(0,32,0,0);
			self.bNoGravity = true;
		}
		goto See;
	Pain:
		TRIT A 1 A_Pain;
		Goto See;
	Drop:
		TRIT A 2 A_TriteDrop;
		TRIT A 1 A_CheckSolidFooting("Landing");
		wait;
	Landing:
		TRIT A 4 A_PlaySound("bodyfalls/medium", CHAN_6);
		goto SeeFloor;
	Death:
		TRIT G 4 A_Scream;
		TRIT H 4
		{
			A_SpawnProjectile ("GreenBlood", random(2,22), 0, random (0, 360), 2, random (0, 160));
			A_SpawnProjectile ("GreenBlood", random(2,22), 0, random (0, 360), 2, random (0, 160));
			A_SpawnProjectile ("GreenBlood", random(2,22), 0, random (0, 360), 2, random (0, 160));
			A_SpawnProjectile ("GreenBlood", random(2,22), 0, random (0, 360), 2, random (0, 160));
			A_SpawnProjectile ("MetaSplooshGreen", random(2,22), 0, random (0, 360), 2, random (0, 160));
			A_SpawnProjectile ("MetaSplooshGreen", random(2,22), 0, random (0, 360), 2, random (0, 160));
			A_SpawnItem("BloodSplatGreen");
		}
		TRIT IJK 4;
		Stop;
	}
	
	// Change actor's visual orientation based on whether they're on the floor or ceiling.
	override void Tick()
	{
		if (!bNoGravity)
		{
			scale.x = 0.5;
			roll = 0;
			MaxTargetRange = 1024;
		} else {
			scale.x = -0.5;
			roll = 180;
			MaxTargetRange = 128;
		}
		Super.Tick();
	}
	
	// Governs Trite walking behavior. If they're on the celing and hit a change in ceiling
	// height, drop back down to Earth. Or Mars. Or whatever.
	void A_TriteChaseDecide ()
	{
		A_PlaySound ("monsters/trite/walk", CHAN_BODY);
		
		if (!bNoGravity)
		{
			SetStateLabel("SeeFloor");
		}
		else if (ceilingz > pos.z + height)
		{
			SetStateLabel("Drop");
		}
	}

	// Oh, what a feeling. Am I on the floor or ceiling?
	void A_TriteLookInit ()
	{
		State st;
		if (bNoGravity)
		{
			st = FindState("LookCeiling");
		}
		else
		{
			st = FindState("LookFloor");
		}
		if (st != CurState.NextState)
		{
			SetState (st);
		}
	}

	// Going down!
	void A_TriteDrop ()
	{
		bNoVerticalMeleeRange = false;
		bNoGravity = false;
	}

	// Drop from the celing if on it, or nibble a dude if you're on the floor.
	void A_TriteAttack ()
	{
		if (bNoGravity)
		{
			SetStateLabel("Drop");
		}
		else if (target != null)
		{
			A_FaceTarget ();
			if (CheckMeleeRange ())
			{
				int damage = (random[Trite]() & 7) * 2 + 2;

				int newdam = target.DamageMobj (self, self, damage, 'Melee');
				target.TraceBleed (newdam > 0 ? newdam : damage, self);
			}
		}
	}

	// Play creepy little sounds as you walk. This could possibly be more ambitious,
	// but that's for a future Kinsie.
	void A_TriteWalk ()
	{
		A_PlaySound ("monsters/trite/walk", CHAN_BODY);
		A_MetaChase ();
	}

	
}