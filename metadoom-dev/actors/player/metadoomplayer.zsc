/*
----------------------------
MetaDoom
Actor Definitions
Player Class
----------------------------
*/

// counters for death states
// these tell the metadoom weapon how you done fucked up
class DeathStateFallingDown : _Boolean {}
class DeathStateGibbed : _Boolean {}

// counters for acs scripts
class DisableHUD : _Boolean {}
class PlayerHealthWarning : _Boolean {}
class FireExtinguished : _Boolean {}

class x100Percent_Monsters : _Boolean {}
class x100Percent_Items : _Boolean {}
class x100Percent_Secrets : _Boolean {}
// prevent multiple 100% scripts from running at once
class x100Percent_Running : _Boolean {}

class MetaDoomPlayer : PlayerPawn
{
	Default
	{
	Speed 1;
	Health 100;
	Radius 16;
	Height 56;
	Mass 100;
	PainChance 255;
	Player.DisplayName "Slayer";
	Player.CrouchSprite "PLYC";
	Player.StartItem "MetaPistol";
	Player.WeaponSlot 1, "MetaPistol", "MetaBerserkFist", "MetaLastResortFist", "MetaCheatDetector";
	Player.WeaponSlot 2, "HolyWaterPistol", "MetaShotgun";
	Player.WeaponSlot 3, "MetaFireExtinguisher", "MetaSuperShotgun";
	Player.WeaponSlot 4, "MetaChaingun", "MetaMachineGun";
	Player.WeaponSlot 5, "MetaGrenadeLauncher", "MetaRocketLauncher";
	Player.WeaponSlot 6, "MetaGaussCannon", "MetaLightningGun", "MetaPlasmaRifle";
	Player.WeaponSlot 7, "MetaBFG9000", "MetaUnmaker", "MetaSoulcube";
	Player.WeaponSlot 8, "MetaChainsaw", "MetaAxe";
	
	+NOSKIN
	
	Player.ColorRange 112, 127;
	Player.Colorset 0, "Green",			0x70, 0x7F,  0x72;
	Player.Colorset 1, "Gray",			0x60, 0x6F,  0x62;
	Player.Colorset 2, "Brown",			0x40, 0x4F,  0x42;
	Player.Colorset 3, "Red",			0x20, 0x2F,  0x22;
	// Doom Legacy additions
	Player.Colorset 4, "Light Gray",	0x58, 0x67,  0x5A;
	Player.Colorset 5, "Light Brown",	0x38, 0x47,  0x3A;
	Player.Colorset 6, "Light Red",		0xB0, 0xBF,  0xB2;
	Player.Colorset 7, "Light Blue",	0xC0, 0xCF,  0xC2;
	
	damagefactor "DogCollar", 0;
	damagefactor "Dogsplosion", 0;
	damagefactor "NoHarmPlayer", 0;
	}
	
	// This is a part of a gross hack to ensure that the player's angle isn't
	// snapped around in a disorienting fashion if they get punched by another
	// player in deathmatch.
	float oldangle;
	
	States
	{
	Spawn:
		PLAY Z -1;
		Loop;
	See:
		PLAY ABCD 4;
		goto Spawn;
	Missile:
		PLAY E 12;
		Goto Spawn;
	Melee:
		PLAY F 6 BRIGHT;
		Goto Missile;
	Pain:
		PLAY G 4;
		PLAY G 4 A_Pain;
		Goto Spawn;
	Pain.Fist:
		PLAY G 0 
		{
			// See above comment about gross hack.
			oldangle = angle;
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 16, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			angle = oldangle;
		}
		goto Pain;
	Pain.KrautBoot:
		PLAY G 0 
		{
			// Ditto.
			oldangle = angle;
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 16, 1, 0);
			ThrustThingZ(0,32,0,1);
			angle = oldangle;
		}
		goto Pain;
	Death.KrautBoot:
	Death.Fist:
		PLAY G 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 16, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
		}
		goto Death;
	XDeath.KrautBoot:
	XDeath.Fist:
		PLAY G 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 16, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
		}
		goto XDeath;
	Pain.BerserkFist:
		PLAY G 0 
		{
			// You know the drill by now.
			oldangle = angle;
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 64, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			angle = oldangle;
		}
		goto Pain;
	Death.BerserkFist:
		PLAY G 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 64, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
		}
		goto Death;
	XDeath.BerserkFist:
		PLAY G 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 64, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
		}
		goto XDeath;
	Pain.Slime:
		PLAY G 4;
		PLAY G 4 A_PlaySound("*hurtslime");
		Goto Spawn;
	Pain.SpiderdemonTKAttack:
		PLAY G 0 
		{
			ThrustThingZ(0,32,0,1);
		}
		goto Pain;
	Death:
		PLAY H 0;
		PLAY H 0 A_StopSound(CHAN_BODY);
		PLAY H 0 A_StopSound(CHAN_WEAPON);
		TNT1 A 0 A_StopSound(CHAN_6);
		PLAY H 10;
		PLAY I 10 A_PlayerScream;
		PLAY J 10 A_NoBlocking;
		PLAY K 10;
		PLAY L -1;
		Stop;
	Death.Crush:
		PLAY H 0;
		PLAY H 0 A_StopSound(CHAN_BODY);
		PLAY H 0 A_StopSound(CHAN_WEAPON);
		TNT1 A 0 A_StopSound(CHAN_6);
		PLAY H 10 A_GiveInventory("DeathStateGibbed");
		PLAY I 10 A_PlaySound("*crushed");
		PLAY J 10 A_NoBlocking;
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		PLAY H 0;
		PLAY H 0 A_StopSound(CHAN_BODY);
		PLAY H 0 A_StopSound(CHAN_WEAPON);
		TNT1 A 0 A_StopSound(CHAN_6);
		PLAY O 0 A_GiveInventory("DeathStateGibbed");
		PLAY O 5;
		TNT1 A 0 A_SkullPop("MetaPlayerSkull");
		TNT1 A 0 A_SpawnItemEx("MetaGibber",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
		TNT1 A -1;
		Stop;
	}
	
	// This version of DeathThink() is copy-pasted and modified slightly to allow
	// for additional control over the camera height lowering when killed.
	override void DeathThink ()
	{
		let player = self.player;
		int dir;
		double delta;

		player.Uncrouch();
		TickPSprites();

		player.onground = (pos.Z <= floorz);
		if (self is "PlayerChunk")
		{ // Flying bloody skull or flying ice chunk
			player.viewheight = 6;
			player.deltaviewheight = 0;
			if (player.onground)
			{
				if (Pitch > -19.)
				{
					double lookDelta = (-19. - Pitch) / 8;
					Pitch += lookDelta;
				}
			}
		}
		else if (!bIceCorpse && CheckInventory("DeathStateFallingDown", 1))
		{ // Fall to ground (if not frozen)
			// This check has been modified to only go ahead if DeathStateFallingDown
			// is in the inventory. Add or take this in the MetaDoomWeapon class
			// as appropriate.
			player.deltaviewheight = 0;
			if (player.viewheight > 6)
			{
				player.viewheight -= 1;
			}
			if (player.viewheight < 6)
			{
				player.viewheight = 6;
			}
			if (Pitch < 0)
			{
				Pitch += 3;
			}
			else if (Pitch > 0)
			{
				Pitch -= 3;
			}
			if (abs(Pitch) < 3)
			{
				Pitch = 0.;
			}
			
		}
		// Rest of this function is identical to gzdoom.pk3 and can be ignored.
		player.mo.CalcHeight ();
			
		if (player.attacker && player.attacker != self)
		{ // Watch killer
			double diff = deltaangle(angle, AngleTo(player.attacker));
			double delta = abs(diff);
	
			if (delta < 10)
			{ // Looking at killer, so fade damage and poison counters
				if (player.damagecount)
				{
					player.damagecount--;
				}
				if (player.poisoncount)
				{
					player.poisoncount--;
				}
			}
			delta /= 8;
			Angle += clamp(diff, -5., 5.);
		}
		else
		{
			if (player.damagecount)
			{
				player.damagecount--;
			}
			if (player.poisoncount)
			{
				player.poisoncount--;
			}
		}		

		if ((player.cmd.buttons & BT_USE ||
			((multiplayer || alwaysapplydmflags) && sv_forcerespawn)) && !sv_norespawn)
		{
			if (Level.maptime >= player.respawn_time || ((player.cmd.buttons & BT_USE) && player.Bot == NULL))
			{
				player.cls = NULL;		// Force a new class if the player is using a random class
				player.playerstate = (multiplayer || level.AllowRespawn || sv_singleplayerrespawn || G_SkillPropertyInt(SKILLP_PlayerRespawn)) ? PST_REBORN : PST_ENTER;
				if (special1 > 2)
				{
					special1 = 0;
				}
			}
		}
	}
}

class MetaPlayerSkull : PlayerChunk
{
	Default
	{
		Radius 4;
		Height 4;
		+DOOMBOUNCE
		+NOBLOCKMAP
		+DROPOFF
		PROJECTILE;
		+CANNOTPUSH
		+SKYEXPLODE
		+NOBLOCKMONST
		+NOSKIN
		-NOGRAVITY
		-NOBLOCKMAP
		-NOTELEPORT
		-EXPLODEONWATER
		+CANBOUNCEWATER
		+DONTTRANSLATE // Enough flags?
		+ROLLSPRITE
		+USEBOUNCESTATE
		bouncefactor 0.5;
		SeeSound "player/helmetgib";
		gravity 0.5;
		Speed 5;
	}
	
	// This is to fix a bug where the playerchunk's angle resets whenever it
	// bounces off the floor.
	double goodangle;
	
	States
	{
	Spawn:
		PLHD A 0;
		PLHD A 0 
		{
			ThrustThingZ (0, 45, 0, 1);
			viewbob = 0; // playerchunks should not viewbob. ever. don't @ me.
		}
		goto See;
	See:
		PLHD B 0 A_SpawnProjectile("FlyingBloodCheap", -5,0,0);
		PLHD AAABBBCCCDDD 1 
		{
			A_SetRoll((roll + 1));
			goodangle = angle;
		}
		loop;
	See2:
		PLHD B 0 A_SpawnProjectile("FlyingBloodCheap", -5,0,0);
		PLHD AAABBBCCCDDD 1 
		{
			A_SetRoll((roll - 1));
			goodangle = angle;
		}
		loop;
	Bounce.Floor:
		PLHD B 0 
		{
			angle = goodangle;
			A_SpawnItem("BloodSplatSmall");
		}
	Bounce:
		PLHD B 0 { angle = goodangle; }
		PLHD B 0 A_Jump(128,"See2");
		goto See;
	Death:
		PLHD B -1 A_CheckPlayerDone;
		Wait;
	}
}